# based on https://www.digitalocean.com/community/tutorials/how-to-set-up-flask-with-mongodb-and-docker#step-1-%E2%80%94-writing-the-stack-configuration-in-docker-compose

version: '3'
services:

  flask:
    build:
      context: app
      dockerfile: Dockerfile
    container_name: flask
    restart: unless-stopped
    environment:
      APP_ENV: "dev"
      APP_DEBUG: "True"
      APP_PORT: 5000
      MONGODB_DATABASE: flasky
      # MONGODB_USERNAME: flaskuser
      # MONGODB_PASSWORD: hola123
      MONGODB_HOSTNAME: mongodb
    volumes:
      - appdata:/var/www
    depends_on:
      - mongodb
    networks:
      - frontend
      - backend

  mongodb:
    image: mongo:4.0.8
    container_name: mongodb
    restart: unless-stopped
    command: mongod 
    environment:
      # MONGO_INITDB_ROOT_USERNAME: mongodbuser
      # MONGO_INITDB_ROOT_PASSWORD: hola123
      # MONGO_INITDB_DATABASE: flasky
      MONGODB_DATABASE: flasky
      # MONGODB_USER: flaskuser
      # MONGODB_PASS: hola123
      MONGODB_DATA_DIR: /data/db
      MONDODB_LOG_DIR: /dev/null
    volumes:
      - mongodbdata:/data/db
    networks:
      - backend

  webserver:
    build:
      context: nginx
      dockerfile: Dockerfile
    container_name: webserver
    restart: unless-stopped
    environment:
      APP_ENV: "prod"
      APP_NAME: "webserver"
      APP_DEBUG: "true"
      SERVICE_NAME: "webserver"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginxdata:/var/log/nginx
    depends_on:
      - flask
    networks:
      - frontend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  mongodbdata:
    driver: local
  appdata:
    driver: local
  nginxdata:
    driver: local